services:

  # A Windows-based nodejs base image
  nodejs:
    image: ${REGISTRY}${COMPOSE_PROJECT_NAME}-nodejs:${VERSION:-latest}
    deploy:
      replicas: 0

  rendering:
    image: ${REGISTRY}${COMPOSE_PROJECT_NAME}-rendering:${VERSION:-latest}
    deploy:
      replicas: 0
    volumes:
      - .\src\healthsystementerprise:C:\app
    environment:
      SITECORE_API_HOST: "http://cm"
      NEXTJS_DIST_DIR: ".next-container"
      PUBLIC_URL: "https://${RENDERING_HOST}"
      JSS_EDITING_SECRET: ${JSS_EDITING_SECRET}
      SITECORE_API_KEY: "${SITECORE_API_KEY}"
      DISABLE_SSG_FETCH: ${DISABLE_SSG_FETCH}
    depends_on:
      cm:
        condition: service_healthy
      nodejs:
        condition: service_started
    labels:
      - "traefik.enable=true"
      - "traefik.http.middlewares.rendering-headers.headers.accesscontrolallowmethods=GET,POST,OPTIONS"
      - "traefik.http.middlewares.rendering-headers.headers.accesscontrolalloworiginlist=https://${RENDERING_HOST}}"
      - "traefik.http.routers.rendering-secure.middlewares=rendering-headers"
      - "traefik.http.routers.rendering-secure.entrypoints=websecure"
      - "traefik.http.routers.rendering-secure.rule=Host(`${RENDERING_HOST}`)"
      - "traefik.http.routers.rendering-secure.tls=true"
    networks:
      default:
        aliases:
          - ${RENDERING_HOST}

  # Mount the Traefik configuration and certs.
  traefik:
    volumes:
      - ./docker/traefik:C:/etc/traefik
    depends_on:
      cm:
        condition: service_healthy
      nodejs:
        condition: service_started

  # Mount our SQL data folder and use our custom image with the Headless Services (JSS)
  # module data added. See Dockerfile for details.
  mssql:
    volumes:
      - type: bind
        source: .\docker\data\sql
        target: c:\data
        
  # Mount our Solr data folder and use our retagged Solr image.
  # Some modules (like SXA) also require additions to the Solr image.
  solr:
    volumes:
      - type: bind
        source: .\docker\data\solr
        target: c:\data
        
  # Use our retagged Identity Server image.
  # Configure for a mounted license file instead of using SITECORE_LICENSE.
  id:
    image: ${REGISTRY}${COMPOSE_PROJECT_NAME}-id7:${VERSION:-latest}
    volumes:
      - ${HOST_LICENSE_FOLDER}:c:\license
    environment:
      SITECORE_LICENSE_LOCATION: c:\license\license.xml
    networks:
      default:
        aliases:
          - ${ID_HOST}
  # Use our custom CM image with added modules and solution code.
  # Folders are mounted below for code deployment and log output. See Dockerfile for details.
  # Configure for a mounted license file instead of using SITECORE_LICENSE.
  cm:
    image: ${REGISTRY}${COMPOSE_PROJECT_NAME}-xm1-cm:${VERSION:-latest}
    volumes:
      - ${LOCAL_DEPLOY_PATH}\platform:C:\deploy
      - ${LOCAL_DATA_PATH}\cm:C:\inetpub\wwwroot\App_Data\logs
      - ${HOST_LICENSE_FOLDER}:c:\license
    environment:
      SITECORE_LICENSE_LOCATION: c:\license\license.xml
      RENDERING_HOST_INTERNAL_URI: "http://rendering:3000"      
      SITECORE_JSS_EDITING_SECRET: ${JSS_EDITING_SECRET}
      RENDERING_HOST_ENDPOINT_URI: "http://rendering:3000/api/editing/render"
      SITECORE_EDITING_HOST_PUBLIC_HOST: "${RENDERING_HOST}"
      ## Development Environment Optimizations
      SITECORE_DEVELOPMENT_PATCHES: DevEnvOn,CustomErrorsOff,DebugOn,DiagnosticsOff,InitMessagesOff,LocalDev
      Sitecore_AppSettings_exmEnabled:define: "no" # remove to turn on EXM
    entrypoint: powershell -Command "& C:/tools/entrypoints/iis/Development.ps1"
    networks:
      default:
        aliases:
          - ${CM_HOST}
  hostswriter:
    image: rahnemann/windows-hosts-writer:2.0-nanoserver-1809
    volumes:
      - C:\windows\system32\drivers\etc\:C:\driversetc\
      - type: npipe
        source: '\\.\pipe\docker_engine\'
        target: '\\.\pipe\docker_engine\'
    environment:
      TERMINATION_MAP: rendering,id,cm,cd:traefik